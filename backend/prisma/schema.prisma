// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  username      String          @unique
  password      String
  roleId        Int
  role          Role            @relation(fields: [roleId], references: [id])
  profile       Profile?
  PasswordReset PasswordReset[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  user User[]
}

model Profile {
  id           Int           @id @default(autoincrement())
  firstName    String        @db.VarChar(255)
  lastName     String        @db.VarChar(255)
  profilePic   String        @default("default-profile.png")
  email        String        @unique
  dob          DateTime?
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id])
  parent       Parent?
  Psychologist Psychologist?
  Teacher      Teacher?
}

model Parent {
  id            Int            @id @default(autoincrement())
  profileId     Int            @unique
  profile       Profile        @relation(fields: [profileId], references: [id])
  children      Child[]
  psychologists Psychologist[]
  Review        Review[]
}

model Review {
  id             Int          @id @default(autoincrement())
  rating         Float?
  review         String?
  psychologistId Int
  psychologist   Psychologist @relation(fields: [psychologistId], references: [id])
  parentId       Int
  parent         Parent       @relation(fields: [parentId], references: [id])
}

model Psychologist {
  id                Int      @id @default(autoincrement())
  speciality        String?
  yearsOfExperience Int?
  profileId         Int      @unique
  profile           Profile  @relation(fields: [profileId], references: [id])
  clients           Parent[]
  Review            Review[]
}

model Teacher {
  id         Int     @id @default(autoincrement())
  school     String?
  speciality String?
  profileId  Int     @unique
  profile    Profile @relation(fields: [profileId], references: [id])
  students   Child[]
}

model Child {
  id         Int      @id @default(autoincrement())
  name       String
  dob        DateTime
  profilePic String
  parent     Parent?  @relation(fields: [parentId], references: [id])
  parentId   Int
  teacher    Teacher? @relation(fields: [teacherId], references: [id])
  teacherId  Int?
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  otp       String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}
