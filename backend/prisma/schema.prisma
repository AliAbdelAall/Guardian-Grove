// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  username      String          @unique
  password      String
  roleId        Int
  role          Role            @relation(fields: [roleId], references: [id])
  profile       Profile?
  PasswordReset PasswordReset[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  DeviceToken   DeviceToken?
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  user User[]
}

model Profile {
  id           Int           @id @default(autoincrement())
  firstName    String        @db.VarChar(255)
  lastName     String        @db.VarChar(255)
  profilePic   String        @default("default-profile.png")
  email        String        @unique
  dob          DateTime?
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parent       Parent?
  Psychologist Psychologist?
  Teacher      Teacher?
  Message      Message[]
}

model Parent {
  id               Int                @id @default(autoincrement())
  profileId        Int                @unique
  profile          Profile            @relation(fields: [profileId], references: [id])
  children         Child[]
  psychologists    Psychologist[]
  Review           Review[]
  ScheduledMeeting ScheduledMeeting[]
  Conversation     Conversation[]
}

model Review {
  id             Int          @id @default(autoincrement())
  rating         Float?
  review         String?
  status         String       @default("Pending")
  psychologistId Int
  psychologist   Psychologist @relation(fields: [psychologistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId       Int
  parent         Parent       @relation(fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Psychologist {
  id                Int                @id @default(autoincrement())
  speciality        String?
  yearsOfExperience Int?
  profileId         Int                @unique
  profile           Profile            @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  clients           Parent[]
  Reviews           Review[]
  ScheduledMeeting  ScheduledMeeting[]
  Instruction       Instruction[]
  Conversation      Conversation[]
}

model Teacher {
  id            Int             @id @default(autoincrement())
  speciality    String?
  profileId     Int             @unique
  profile       Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  students      Child[]
  School        School?         @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schoolId      Int?
  TeacherReport TeacherReport[]
  Conversation  Conversation[]
}

model Child {
  id            Int             @id @default(autoincrement())
  name          String
  dob           DateTime
  profilePic    String          @default("default-profile.png")
  parent        Parent          @relation(fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId      Int
  teacher       Teacher?        @relation(fields: [teacherId], references: [id])
  teacherId     Int?
  School        School?         @relation(fields: [schoolId], references: [id])
  schoolId      Int?
  TeacherReport TeacherReport[]
  Instruction   Instruction[]
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  otp       String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model School {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  sudents  Child[]
  teachers Teacher[]
}

model ScheduledMeeting {
  id             Int          @id @default(autoincrement())
  title          String
  start          DateTime
  end            DateTime
  Psychologist   Psychologist @relation(fields: [psychologistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  psychologistId Int
  parent         Parent?      @relation(fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId       Int?
}

model TeacherReport {
  id        Int      @id @default(autoincrement())
  report    String
  teacherId Int
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  childId   Int
  child     Child    @relation(fields: [childId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
}

model Instruction {
  id             Int          @id @default(autoincrement())
  Instruction    String
  psychologistId Int
  psychologist   Psychologist @relation(fields: [psychologistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  childId        Int
  child          Child        @relation(fields: [childId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime     @default(now())
}

model Conversation {
  id             Int           @id @default(autoincrement())
  parent         Parent        @relation(fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId       Int
  teacher        Teacher?      @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherId      Int?
  psychologist   Psychologist? @relation(fields: [psychologistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  psychologistId Int?
  Message        Message[]
}

model Message {
  id             Int          @id @default(autoincrement())
  text           String
  sender         Profile      @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId       Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  conversationId Int
  createdAt      DateTime     @default(now())
}

model DeviceToken {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int    @unique
  token  String
}
